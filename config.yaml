test_size: 0.2
random_state: 1
target_variable: "Ticket Type"
display_stub: False

databases:
  - file_name: "cruise_pre.db"
    table_name: "cruise_pre"
    index: "index"
  - file_name: "cruise_post.db"
    table_name: "cruise_post"
    index: "index"
  
composite_fields_to_split:
  - composite_field: "Source of Traffic"
    new_column_list: "['Source', 'Traffic']"
    delimiter: " - "
  - composite_field: "Cruise Distance"
    new_column_list: "['Distance', 'Dist_Metrics']"
    delimiter: " "

ID_columns: "['Ext_Intcode_x', 'Ext_Intcode_y']"

convert_obj_numeric:
  - col_list: "['Distance']"
    dtype: 'float64'
  
convert_obj_datetime: 
  - column_list: "['Date of Birth']"
    format: "%d/%m/%Y"
  - column_list: "['Logging']"
    format: "%d/%m/%Y %H:%M"

pct_missing_threshold: 0.4

continuous_variables: "['Date of Birth', 'Logging']"

dirty_data_setting:
  - field_list: "['Gender']"
    replace_val: 'F'
    replace_with: 'Female'
    like_ind: True
  - field_list: "['Gender']"
    replace_val: 'M'
    replace_with: 'Male'
    like_ind: True
  - field_list: "['Cruise Name']"
    replace_val: 'L'
    replace_with: 'Lapras'
    like_ind: True
  - field_list: "['Cruise Name']"
    replace_val: 'b'
    replace_with: 'Blastoise'
    like_ind: True
  - field_list: "['Embarkation/Disembarkation time convenient', 'Ease of Online booking', 'Gate location',  'Online Check-in', 'Cabin Comfort', 
      'Cabin service', 'Baggage handling', 'Port Check-in Service', 'Onboard Service', 'Cleanliness']"
    replace_val: 0
    replace_with: None
    like_ind: False


valid_data_setting:
  - col_list: "['Gender']"
    valid_data_list: "[None, 'Female','Male']"
  - col_list: "['Onboard Wifi Service', 'Onboard Dining Service','Onboard Entertainment']"
    valid_data_list: "[None, 'Not at all important', 'A little important', 'Somewhat important', 'Very important', 'Extremely important']"
  - col_list: "['Embarkation/Disembarkation time convenient', 'Ease of Online booking', 'Gate location', 'Online Check-in', 'Cabin Comfort',
      'Cabin service', 'Baggage handling', 'Port Check-in Service', 'Onboard Service', 'Cleanliness']"
    valid_data_list: "[None,1.0, 2.0, 3.0, 4.0, 5.0]"
  - col_list: "['Cruise Name']"
    valid_data_list: "[None,'Lapras','Blastoise']"
  - col_list: "['Ticket Type']"
    valid_data_list: "[None,'Deluxe','Luxury', 'Standard']"
  - col_list: "['Source']"
    valid_data_list: "[None,'Indirect','Direct']"
  - col_list: "['Dining']"
    valid_data_list: "[None,0, 1]"
  - col_list: "['Traffic']"
    valid_data_list: "[None,'Search Engine','Company Website','Email Marketing','Social Media']"
  - col_list: "['Dist_Metrics']"
    valid_data_list: "[None,'KM','Miles']"

non_numeric_cols: "['Gender','Onboard Wifi Service','Onboard Dining Service','Onboard Entertainment','Cruise Name',
                            'Ticket Type','Source','Traffic','Dist_Metrics']"

convert_date_yyyy:
  col_list: "['Date of Birth','Logging']"
  yyyy_col_list: "['Year of Birth','Year of Logging']"

impute_missing_value:
  - impute_type: 'random'
    col_list: "['Gender','Online Check-in','Baggage handling','Cleanliness']"
  - impute_type: 'mode'
    col_list: "['Cruise Name','Onboard Wifi Service', 'Ease of Online booking', 'Embarkation/Disembarkation time convenient', 'Gate location', 'Onboard Dining Service','Cabin Comfort','Onboard Entertainment', 'Cabin service','Port Check-in Service','Onboard Service','Dist_Metrics']"
  - impute_type: 'mean'
    col_list: "['Distance']"

one_hot_encode: "['Traffic']"

diff_year:
  - minuend_col: 'Year of Logging'
    subtrahend_col: 'Year of Birth'
    new_col: 'Age'

scalar_option: "StandardScaler"

column_to_normalise: "['Age','Distance']"

verbose: 1    

selected_models:
  - Model_Name: "Logistic Regression"
    Model_Class_Name: "Logistic_Regression()"
    Model_Hyperparameter: "{'max_iter':5000}"
  - Model_Name: "Decision Tree Classifier"
    Model_Class_Name: "Decision_Tree_Classifier()"
    Model_Hyperparameter: "{'criterion':'gini', 'max_depth':12,  'min_samples_split':4, 'max_features':'sqrt'}"
  - Model_Name: "Random Forest Classifier"
    Model_Class_Name: "Random_Forest_Classifier()"
    Model_Hyperparameter: "{'n_estimators':150, 'min_samples_split':20, 'min_samples_leaf': 28, 'max_features': 'sqrt', 'max_depth': 8, 'criterion': 'gini', 'class_weight': 'balanced'}"
  - Model_Name: "Gradient Boosting Classifier"
    Model_Class_Name: "Gradient_Boosting_Classifier()"
    Model_Hyperparameter: "{'n_estimators': 200, 'min_samples_split': 28, 'min_samples_leaf': 24, 'max_depth': 8, 'criterion': 'friedman_mse'}"

selected_model: 
  Model_Name: "Gradient Boosting Classifier"
  Model_Class_Name: "Gradient_Boosting_Classifier()"
  Model_Hyperparameters: "{'n_estimators': 200, 'min_samples_split': 28, 'min_samples_leaf': 24, 'max_depth': 8, 'criterion': 'friedman_mse'}"

    
    
